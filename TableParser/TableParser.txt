grammar TableParser;

compileUnit : expression EOF;

expression :
	LPAREN expression RPAREN #ParenthesizedExpr
	| expression EXPONENT expression #ExponentialExpr
    | expression operatorToken=(MULTIPLY | DIVIDE) expression #MultiplicativeExpr
	| expression operatorToken=(ADD | SUBTRACT) expression #AdditiveExpr

	| operatorToken=(MOD | DIV) LPAREN expression COMMA expression RPAREN #ModDivExpr
	| MAX LPAREN expression COMMA expression RPAREN #MaxExpr
	| MIN LPAREN expression COMMA expression RPAREN #MinExpr

	| NUMBER #NumberExpr
	| IDENTIFIER #IdentifierExpr
	; 

/*
 * Lexer Rules
 */

NUMBER : INT ('.' INT)?; 
IDENTIFIER : [a-zA-Z]+[1-9][0-9]*;

INT : ('0'..'9')+;

EXPONENT : '^';
MULTIPLY : '*';
DIVIDE : '/';
SUBTRACT : '-';
ADD : '+';
MAX : 'max';
MIN : 'min';
LPAREN : '(';
RPAREN : ')';
COMMA : ',';
MOD : 'mod';
DIV : 'div';

WS : [ \t\r\n] -> channel(HIDDEN);

